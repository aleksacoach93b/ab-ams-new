// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  email         String      @unique
  password      String?     // Hashed password
  role          UserRole    @default(PLAYER)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  lastLoginAt   DateTime?
  loginIp       String?
  userAgent     String?
  
  // Relations
  player        Player?
  staff         Staff?
  
  @@map("User")
}

model Player {
  id              String    @id @default(cuid())
  name            String
  email           String?
  phone           String?
  position        String?
  jerseyNumber    Int?
  dateOfBirth     DateTime?
  status          PlayerStatus @default(ACTIVE)
  userId          String?   @unique
  teamId          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  availabilityStatus String @default("Fully Available")
  imageUrl        String?
  
  // Relations
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  team            Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  notes           PlayerNote[]
  media           PlayerMedia[]
  events          EventParticipant[]
  
  @@map("Player")
}

model Staff {
  id              String    @id @default(cuid())
  name            String
  email           String?
  phone           String?
  position        String?
  userId          String?   @unique
  teamId          String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  canViewReports  Boolean   @default(false)
  canEditReports  Boolean   @default(false)
  canDeleteReports Boolean  @default(false)
  imageUrl        String?
  
  // Relations
  user            User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  team            Team?     @relation(fields: [teamId], references: [id], onDelete: SetNull)
  events          EventParticipant[]
  
  @@map("Staff")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  imageUrl    String?
  
  // Relations
  players     Player[]
  staff       Staff[]
  
  @@map("Team")
}

model Event {
  id          String      @id @default(cuid())
  title       String
  description String?
  date        DateTime
  startTime   String
  endTime     String
  location    String?
  type        EventType
  status      EventStatus @default(SCHEDULED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  iconName    String?
  
  // Relations
  participants EventParticipant[]
  media       EventMedia[]
  
  @@map("Event")
}

model EventParticipant {
  id        String   @id @default(cuid())
  eventId   String
  playerId  String?
  staffId   String?
  createdAt DateTime @default(now())
  
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  player    Player?  @relation(fields: [playerId], references: [id], onDelete: Cascade)
  staff     Staff?   @relation(fields: [staffId], references: [id], onDelete: Cascade)
  
  @@map("EventParticipant")
}

model EventMedia {
  id          String      @id @default(cuid())
  eventId     String
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int?
  uploadedAt  DateTime    @default(now())
  
  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@map("EventMedia")
}

model PlayerNote {
  id          String      @id @default(cuid())
  playerId    String
  content     String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  
  player      Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@map("PlayerNote")
}

model PlayerMedia {
  id          String      @id @default(cuid())
  playerId    String
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int?
  uploadedAt  DateTime    @default(now())
  
  player      Player      @relation(fields: [playerId], references: [id], onDelete: Cascade)
  
  @@map("PlayerMedia")
}

model ReportFolder {
  id          String      @id @default(cuid())
  name        String
  description String?
  parentId    String?
  createdBy   String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isActive    Boolean     @default(true)
  
  // Relations
  parent      ReportFolder? @relation("FolderHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    ReportFolder[] @relation("FolderHierarchy")
  reports     Report[]
  
  @@map("ReportFolder")
}

model Report {
  id          String      @id @default(cuid())
  name        String
  fileName    String
  fileUrl     String
  fileType    String
  fileSize    Int
  folderId    String
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  createdBy   String
  
  // Relations
  folder      ReportFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
  accesses    ReportAccess[]
  
  @@map("Report")
}

model ReportAccess {
  id          String      @id @default(cuid())
  reportId    String
  userId      String
  accessedAt  DateTime    @default(now())
  action      String
  
  report      Report      @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@map("ReportAccess")
}

// Enums
enum UserRole {
  ADMIN
  COACH
  PLAYER
  STAFF
}

enum PlayerStatus {
  ACTIVE
  INJURED
  SUSPENDED
  RETIRED
}

enum EventType {
  TRAINING
  MATCH
  MEETING
  RECOVERY
  OTHER
}

enum EventStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}